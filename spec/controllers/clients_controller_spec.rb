# == Schema Information
#
# Table name: clients
#
#  uuid                   :integer          not null, primary key
#  email                  :string(255)      default(""), not null
#  encrypted_password     :string(255)      default(""), not null
#  reset_password_token   :string(255)
#  reset_password_sent_at :datetime
#  remember_created_at    :datetime
#  sign_in_count          :integer          default(0), not null
#  current_sign_in_at     :datetime
#  last_sign_in_at        :datetime
#  current_sign_in_ip     :string(255)
#  last_sign_in_ip        :string(255)
#  created_at             :datetime         not null
#  updated_at             :datetime         not null
#  provider               :string(255)
#  uid                    :string(255)
#  confirmation_token     :string(255)
#  confirmed_at           :datetime
#  confirmation_sent_at   :datetime
#  unconfirmed_email      :string(255)
#  avatar_file_name       :string(255)
#  avatar_content_type    :string(255)
#  avatar_file_size       :integer
#  avatar_updated_at      :datetime
#  oauth_avatar           :string(255)
#  invitation_token       :string(255)
#  invitation_created_at  :datetime
#  invitation_sent_at     :datetime
#  invitation_accepted_at :datetime
#  invitation_limit       :integer
#  invited_by_type        :string(255)
#  invited_by_id          :integer
#  invitations_count      :integer          default(0)
#  contact_name           :string(255)
#  business_name          :string(255)
#  billing_currency       :string(255)      default("AUD")
#  stripe_account_id      :string(255)
#
# Indexes
#
#  index_clients_on_confirmation_token    (confirmation_token) UNIQUE
#  index_clients_on_email                 (email) UNIQUE
#  index_clients_on_invitation_token      (invitation_token) UNIQUE
#  index_clients_on_invitations_count     (invitations_count)
#  index_clients_on_invited_by_id         (invited_by_id)
#  index_clients_on_reset_password_token  (reset_password_token) UNIQUE
#

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ClientsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Client. As you add validations to Client, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ClientsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all clients as @clients" do
      client = Client.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:clients)).to eq([client])
    end
  end

  describe "GET #show" do
    it "assigns the requested client as @client" do
      client = Client.create! valid_attributes
      get :show, params: {id: client.to_param}, session: valid_session
      expect(assigns(:client)).to eq(client)
    end
  end

  describe "GET #new" do
    it "assigns a new client as @client" do
      get :new, params: {}, session: valid_session
      expect(assigns(:client)).to be_a_new(Client)
    end
  end

  describe "GET #edit" do
    it "assigns the requested client as @client" do
      client = Client.create! valid_attributes
      get :edit, params: {id: client.to_param}, session: valid_session
      expect(assigns(:client)).to eq(client)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Client" do
        expect {
          post :create, params: {client: valid_attributes}, session: valid_session
        }.to change(Client, :count).by(1)
      end

      it "assigns a newly created client as @client" do
        post :create, params: {client: valid_attributes}, session: valid_session
        expect(assigns(:client)).to be_a(Client)
        expect(assigns(:client)).to be_persisted
      end

      it "redirects to the created client" do
        post :create, params: {client: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Client.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved client as @client" do
        post :create, params: {client: invalid_attributes}, session: valid_session
        expect(assigns(:client)).to be_a_new(Client)
      end

      it "re-renders the 'new' template" do
        post :create, params: {client: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested client" do
        client = Client.create! valid_attributes
        put :update, params: {id: client.to_param, client: new_attributes}, session: valid_session
        client.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested client as @client" do
        client = Client.create! valid_attributes
        put :update, params: {id: client.to_param, client: valid_attributes}, session: valid_session
        expect(assigns(:client)).to eq(client)
      end

      it "redirects to the client" do
        client = Client.create! valid_attributes
        put :update, params: {id: client.to_param, client: valid_attributes}, session: valid_session
        expect(response).to redirect_to(client)
      end
    end

    context "with invalid params" do
      it "assigns the client as @client" do
        client = Client.create! valid_attributes
        put :update, params: {id: client.to_param, client: invalid_attributes}, session: valid_session
        expect(assigns(:client)).to eq(client)
      end

      it "re-renders the 'edit' template" do
        client = Client.create! valid_attributes
        put :update, params: {id: client.to_param, client: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested client" do
      client = Client.create! valid_attributes
      expect {
        delete :destroy, params: {id: client.to_param}, session: valid_session
      }.to change(Client, :count).by(-1)
    end

    it "redirects to the clients list" do
      client = Client.create! valid_attributes
      delete :destroy, params: {id: client.to_param}, session: valid_session
      expect(response).to redirect_to(clients_url)
    end
  end

end
